import org.ajoberstar.grgit.*

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'

group = 'ahe.br'
version = '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	maven {
		url 'https://github.com/arthureggert/mvnrepo/raw/master/'
	}
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
	compile 'org.projectlombok:lombok:1.14.4'
    compile 'org.springframework:spring-beans:4.0.2.RELEASE'
    compile 'org.springframework:spring-context:4.0.2.RELEASE'
    compile 'org.springframework:spring-expression:4.0.2.RELEASE'
    compile 'org.springframework:spring-instrument:4.0.2.RELEASE'
    compile 'org.springframework:spring-jdbc:4.0.2.RELEASE'
    compile 'org.springframework:spring-orm:4.0.2.RELEASE'
    compile 'org.springframework:spring-aop:4.0.2.RELEASE'
    compile 'org.springframework:spring-aspects:4.0.2.RELEASE'
    compile 'org.springframework:spring-context-support:4.0.2.RELEASE'
    compile 'org.springframework:spring-framework-bom:4.0.2.RELEASE'
    compile 'org.springframework:spring-instrument-tomcat:4.0.2.RELEASE'
    compile 'org.springframework:spring-jms:4.0.2.RELEASE'
    compile 'org.springframework:spring-messaging:4.0.2.RELEASE'
    compile 'org.springframework:spring-oxm:4.0.2.RELEASE'
    compile 'org.springframework:spring-test:4.0.2.RELEASE'
    compile 'org.springframework:spring-tx:4.0.2.RELEASE'
    compile 'org.springframework:spring-web:4.0.2.RELEASE'
    compile 'org.springframework:spring-webmvc:4.0.2.RELEASE'
    compile 'org.springframework:spring-webmvc-portlet:4.0.2.RELEASE'
    compile 'org.springframework:spring-websocket:4.0.2.RELEASE'
    compile 'mysql:mysql-connector-java:5.1.21'
    compile 'org.hibernate:hibernate-core:4.3.4.Final'
    compile 'org.apache.commons:commons-lang3:3.3.2'
}

buildscript {
	repositories { mavenCentral() }
	dependencies { classpath 'org.ajoberstar:gradle-git:0.9.0' }
}

uploadArchives {
	repositories.mavenDeployer {
		repository(url: "file:///home/aheggert/Documentos/workspace/mvnrepo/")
	}
}

task fatJar(type: Jar) {
	baseName = project.name + '-all'
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task deployLocal(dependsOn: [clean , build], type:Exec) {
	executable "gradle"
	args "uploadArchives"
}

task deployGit(dependsOn: [sources, deployLocal], type:Exec) {
	workingDir = '../../mvnrepo/'
	commandLine './deploy.sh'
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

